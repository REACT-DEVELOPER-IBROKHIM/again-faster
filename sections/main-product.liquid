{{ 'section-main-product.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .option-Color-radio:checked::after{
    width: 15px;
    height: 15px;
    border-radius: 15px;
    top: -2px;
    left: -1px;
    position: relative;
    background-color: red;
    content: '';
    display: inline-block;
    visibility: visible;
    border: 2px solid white;
    box-shadow: 0px 0px 0px 1px gray;
  }
{%- endstyle %}

<div class="product_container">
  <div class="product_form-container">
    <div class="product_media-wrapper">
      <div class="swiper product_carousel">
        <div class="swiper-wrapper">
          {% for media in product.media %}
          <div class="swiper-slide">
            {% render 'product-media', media: media %}
          </div>
        {% endfor %}
        </div>
      <div class="swiper-pagination"></div>
      </div>
    </div> 
    <div class="product_info-form">
      <div class="product_info">
        {% form 'product', product, id: "product-form", novalidate: 'novalidate'  %}
        <input type="hidden" name="id" value="{{ selected_variant.id }}">
          <h1 class="product_info-title">{{ product.title }}</h1>
          <div id="price-{{section.id }}">
            {% assign product_price = product.selected_or_first_available_variant %}
            <p class="product_info-price" >{{ product_price.compare_at_price | money }}</p>
          </div>
          <div class="card__rating">
            {% render 'icon-star' %}
            {% render 'icon-star' %}
            {% render 'icon-star' %}
            {% render 'icon-star' %}
            {% render 'icon-star' %} 

            <span>18 reviews</span>
          </div>
          <div class="product_finance-company">
            {% assign finance_company_image = product.metafields.finance_company_img.finance_company_image | first %}
            <img src="{{ finance_company_image.src }}" alt="">
            <p>{{ product.metafields.finance_company_text.finance_company_text }}</p>
          </div>
          <p class="product_info-desc">{{ product.description }}</p>
          {{ product.options_with_values  }}
          <div class="product_variants_container">
            {% unless product.has_only_default_variant %}
                <variant-selector data-url="{{ product.url }}" data-section="{{ section.id }}">
                    {% for option in product.options_with_values %}
                        <label for="Option-{{section.id}}-{{forloop.index0 }}" class="option__label">{{ option.name }}</label>
                        <div class="product_variants">
                          {% for value in option.values %}
                              
                           <div>
                              {% render 'color-swatch', option: option, value: value, forloop: forloop %}
                              <label class="option-{{option.name}}-label"  for="option-{{option.name}}-{{ forloop.index0 }}">{{value | escape}}</label>
                           </div>
                          {% endfor %} 
                        </div> 
                        <script type="application/json">
                          {{ product.variants | json }}
                        </script>
                       
                    {% endfor %}
                </variant-selector>  
            {% endunless %}
          </div>
          <p class="error_message" data-ajax-cart-form-error></p>
          {% if product.metafields.custom.free_shipping %}
            <p class="product_features-shipping">Available for Free shipping!</p>
          {% endif %}
            <button type="submit" class="addtocart_btn" {% if product.selected_or_first_available_variant.available == false %}
                disabled
            {% endif %}>
              {% if product.selected_or_first_available_variant.available == false %}
                Sold out
              {% else %}
                Add to cart
              {% endif %}
            </button>
        {% endform %}
      </div>
    </div>
  </div>
</div>

<script>
  class VariantSelector extends HTMLElement{
    constructor(){
      super();
      this.addEventListener("change", this.onVariantChange);
    }

    onVariantChange(){
      this.getSelectedOptions();
      this.getSelectedVariant();

      if(this.currentVariant){
         this.updateURL();
         this.updateFormID();
         this.updatePrice();
      }
    }

    getSelectedOptions(){
      this.radioSize = Array.from( this.querySelectorAll('input[name="option-Size"]'), function(rad) {
        if(rad.checked){
          return rad.value
        }
        return
      } ).filter(i => i !== undefined)?.at(0)  
      this.radioColor = Array.from( this.querySelectorAll('input[name="option-Color"]'),function(rad) {
        if(rad.checked){
          return rad.value
        }
        return
      }).filter(i => i !== undefined)?.at(0)  
      return this.options = [this.radioSize, this.radioColor];
    }

    getVariantJSON() {
      this.variantData = this.variantData || JSON.parse(this.querySelector('[type="application/json"]').textContent)
      return this.variantData
    }

    getSelectedVariant(){
      this.currentVariant = this.getVariantJSON().find(
        (variant) => { 
          const foundVariant = !variant.options.map(
            (option, index) => {
             return this.getSelectedOptions()[index] === option
            }
          ).includes(false)
          if(foundVariant) return variant
        }
      );
      console.log(this.currentVariant) 
    }

    updateURL(){
    if(!this.currentVariant) return
    window.history.replaceState({}, '', `${this.dataset.url}?variant=${this.currentVariant.id}`)
  }

  updateFormID() {
    const form_input = document.querySelector("#product-form").querySelector('input[name="id"]')
    form_input.value = this.currentVariant.id; 
  }

  updatePrice() {
      fetch(`${this.dataset.url}?variant=${this.currentVariant.id}&section_id=${this.dataset.section}`)
        .then(res => res.text())
        .then(resData => {
          console.log(resData)
          const id = `price-${this.dataset.section}`
          const html = new DOMParser().parseFromString(resData, 'text/html')
          const oldPrice  = document.getElementById(id);
          const newPrice = html.getElementById(id)

          if(oldPrice && newPrice)  oldPrice.innerHTML = newPrice.innerHTML
        } );

  }

  }

 
  customElements.define("variant-selector", VariantSelector)  
</script>

<script>
    var swiperProduct = new Swiper(".swiper", {
        slidesPerView: 1,
        direction: "vertical",
        pagination: {
          el: ".swiper-pagination",
          clickable: true
        }
      });
</script>